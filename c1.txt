		Detect a loop in a linked list-Hashing approach

import java.util.HashSet;
public class LinkedList {
    static Node head;

    static class Node {
        int data;
        Node next;

        Node(int d) {
            data = d;
            next = null;
        }
    }
    static public void push(int new_data) {
        Node new_node = new Node(new_data);
        new_node.next = head;
        head = new_node;
    }
    static boolean detectLoop(Node h) {
        HashSet<Node> s = new HashSet<>();
        while (h != null) {
            if (s.contains(h))
                return true;
            s.add(h);
            h = h.next;
        }
        return false;
    }

    public static void main(String[] args) {
        LinkedList llist = new LinkedList();
        llist.push(20);
        llist.push(4);
        llist.push(15);
        llist.push(10);
        llist.head.next.next.next.next = llist.head;
        if (detectLoop(head))
            System.out.println("Loop Exists");
        else
            System.out.println("Loop doesn't exist");
    }
}

		Detect a loop in a linked list-Floydâ€™s Detection

public class LinkedList {
    // 1. Node structure
    static class Node {
        int data;
        Node next;

        Node(int d) {
            data = d;
            next = null;
        }
    }

    // 2. push operation
    Node head;

    void push(int newData) {
        Node newNode = new Node(newData);
        newNode.next = head;
        head = newNode;
    }

    // 3. detect loop
    void detectLoopAndPrint() {
        Node slow = head, fast = head;
        while (slow != null && fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                System.out.println("Loop found");
                return;
            }
        }
        System.out.println("Loop not found");
    }

    // 4. main method
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        list.push(20);
        list.push(41);
        list.push(5);
        list.push(10);
        // 5. Creating a loop for testing
        list.head.next.next.next.next = list.head;
        list.detectLoopAndPrint();
    }
}
